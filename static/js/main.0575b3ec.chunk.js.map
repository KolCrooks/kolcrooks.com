{"version":3,"sources":["components/globe.tsx","pages/main.tsx","components/navbar.tsx","pages/resume/resumeheader.tsx","pages/resume/sections.tsx","pages/resume/resume.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["scene","globe","mesh","comp","renderer","camera","controls","simplex","SimplexNoise","ran","resize","setSize","clientWidth","render","t","animate","requestAnimationFrame","vertices","vert","normalize","multiplyScalar","noise3D","x","y","z","update","rotateY","rotateX","rotateZ","verticesNeedUpdate","groupsNeedUpdate","GlobeCanvas","props","useEffect","WebGLRenderer","setPixelRatio","window","addEventListener","appendChild","domElement","PerspectiveCamera","position","set","lookAt","Scene","OctahedronGeometry","material","MeshNormalMaterial","wireframe","Mesh","add","OrbitControls","enableDamping","enableKeys","enableZoom","enablePan","rotateSpeed","minPolarAngle","maxPolarAngle","Math","PI","renderGlobe","className","ref","e","Main","to","href","pages","name","NavBar","map","p","key","ResumeHeader","ExpLevel","style","width","fillPercent","levelName","Spacer","height","JSHeader","JSSections","imageUrl","Highlight","color","children","ProjectCard","backgroundImage","ReadMore","Resume","App","TransitionGroup","CSSTransition","timeout","exit","classNames","path","exact","Boolean","location","hostname","match","ReactDOM","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.0575b3ec.chunk.js","sourcesContent":["import React, { useEffect } from \"react\";\r\nimport {\r\n  Scene,\r\n  WebGLRenderer,\r\n  PerspectiveCamera,\r\n  Mesh,\r\n  MeshNormalMaterial,\r\n  OctahedronGeometry\r\n} from \"three\";\r\nimport { OrbitControls } from \"three/examples/jsm/controls/OrbitControls\";\r\n\r\nimport SimplexNoise from \"simplex-noise\";\r\n\r\nconst simplex = new SimplexNoise();\r\n\r\ninterface globeProps {\r\n  className?: string;\r\n}\r\n\r\nlet scene: Scene;\r\nlet globe: OctahedronGeometry;\r\nlet mesh: Mesh;\r\nlet comp: HTMLDivElement | null;\r\nlet renderer: WebGLRenderer;\r\nlet camera: PerspectiveCamera;\r\nlet controls: OrbitControls;\r\n\r\nlet ran = false;\r\n\r\nconst GlobeCanvas: React.FC<globeProps> = props => {\r\n  useEffect(() => {\r\n    renderGlobe();\r\n  }, []);\r\n\r\n  return <div className={props.className} ref={e => (comp = e)}></div>;\r\n};\r\n\r\nfunction renderGlobe() {\r\n  if (!comp) return;\r\n  renderer = new WebGLRenderer();\r\n  // renderer.autoClearColor = false;\r\n  renderer.setSize(comp.clientWidth, comp.clientWidth);\r\n  renderer.setPixelRatio(1);\r\n  window.addEventListener(\"resize\", resize);\r\n  comp.appendChild(renderer.domElement);\r\n\r\n  camera = new PerspectiveCamera(45, 1, 1, 500);\r\n  camera.position.set(0, 0, 30);\r\n  camera.lookAt(0, 0, 0);\r\n\r\n  scene = new Scene();\r\n  globe = new OctahedronGeometry(8, 3);\r\n\r\n  for (let vert of globe.vertices) {\r\n    vert\r\n      .normalize()\r\n      .multiplyScalar(\r\n        10 + 0.5 * simplex.noise3D(vert.x * 3, vert.y * 3, vert.z * 3)\r\n      );\r\n  }\r\n\r\n  var material = new MeshNormalMaterial({ wireframe: true });\r\n  mesh = new Mesh(globe, material);\r\n\r\n  scene.add(mesh);\r\n\r\n  controls = new OrbitControls(camera, renderer.domElement);\r\n  controls.enableDamping = true;\r\n  // controls.dampingFactor = 0.1;\r\n  controls.enableKeys = false;\r\n  controls.enableZoom = false;\r\n  controls.enablePan = false;\r\n  controls.rotateSpeed = 0.5;\r\n  controls.minPolarAngle = 0;\r\n  controls.maxPolarAngle = 2 * Math.PI;\r\n\r\n  controls.update();\r\n  renderer.render(scene, camera);\r\n  if (!ran) {\r\n    requestAnimationFrame(animate);\r\n    ran = true;\r\n  }\r\n}\r\n\r\nfunction resize() {\r\n  if (!comp) return;\r\n  renderer.setSize(comp.clientWidth, comp.clientWidth);\r\n  renderer.render(scene, camera);\r\n}\r\n\r\nlet t = 0;\r\nfunction animate() {\r\n  requestAnimationFrame(animate);\r\n  t += 0.01;\r\n\r\n  for (let vert of globe.vertices) {\r\n    vert\r\n      .normalize()\r\n      .multiplyScalar(\r\n        10 +\r\n          0.4 * simplex.noise3D(vert.x * 3 + t, vert.y * 3 + t, vert.z * 3 + t)\r\n      );\r\n  }\r\n  controls.update();\r\n  globe.rotateY(0.003);\r\n  globe.rotateX(0.003);\r\n  globe.rotateZ(0.003);\r\n\r\n  globe.verticesNeedUpdate = true;\r\n  globe.groupsNeedUpdate = true;\r\n  renderer.render(scene, camera);\r\n}\r\n\r\nexport default GlobeCanvas;\r\n","import React from \"react\";\r\nimport Globe from \"../components/globe\";\r\n\r\nimport \"./main.css\";\r\nimport { Link } from \"react-router-dom\";\r\n\r\nconst Main: React.FC<{}> = () => {\r\n  return (\r\n    <div className=\"mainPage\">\r\n      <Globe className=\"globe\"></Globe>\r\n\r\n      <div className=\"Info\">\r\n        Kol Crooks\r\n        <div className=\"links\">\r\n          <div className=\"closerMouse\">\r\n            <Link to=\"/resume\">Resumé</Link>\r\n          </div>\r\n          <div className=\"closerMouse\">\r\n            <Link to=\"/projects\">Projects</Link>\r\n          </div>\r\n          <div className=\"closerMouse\">\r\n            <a href=\"https://github.com/KolCrooks\">Github</a>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Main;\r\n","import React from \"react\";\r\nimport { Link } from \"react-router-dom\";\r\nimport \"./navbar.css\";\r\n\r\ninterface PageRoute {\r\n  to: string;\r\n  name: string;\r\n}\r\n\r\nlet pages: PageRoute[] = [\r\n  { to: \"/\", name: \"Home\" },\r\n  { to: \"/resume\", name: \"Resumé\" },\r\n  { to: \"/projects\", name: \"Projects\" }\r\n];\r\n\r\nconst NavBar: React.FC = () => {\r\n  return (\r\n    <div className=\"navbarContainer\">\r\n      {pages.map(p => (\r\n        <Link to={p.to} key={p.to}>\r\n          {p.name}\r\n        </Link>\r\n      ))}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default NavBar;\r\n","import React from \"react\";\r\n\r\nconst ResumeHeader: React.FC = () => {\r\n  return (\r\n    <div className=\"resumeHeader\">\r\n      <div className=\"resumeText\">Resume</div>\r\n      {/* <div className=\"headerExpander\" /> */}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default ResumeHeader;\r\n","import React from \"react\";\r\n\r\nexport const ExpLevel: React.FC<{\r\n  levelName: string;\r\n  fillPercent: number;\r\n}> = props => {\r\n  return (\r\n    <div className=\"expLevel\">\r\n      <div className=\"expFill\" style={{ width: `${props.fillPercent}%` }}>\r\n        <div className=\"expText\">{props.levelName}</div>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nconst Spacer: React.FC = () => {\r\n  return <div style={{ height: \"0.5rem\" }}></div>;\r\n};\r\n\r\nexport const JSHeader: React.FC = () => {\r\n  return (\r\n    <div>\r\n      <div>\r\n        <h2>JavaScript</h2>\r\n        <ExpLevel levelName=\"Expert\" fillPercent={70} />\r\n        <JSSections />\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport const JSSections: React.FC = () => {\r\n  return (\r\n    <div>\r\n      <Spacer />\r\n      <div>\r\n        <h4>Overview</h4>\r\n        <div className=\"textBody\">\r\n          Javascript has been the main language that I have worked with. With\r\n          Javascript, I have strong experience with frameworks like{\" \"}\r\n          <Highlight>Vue.js</Highlight> and <Highlight>React.js</Highlight> and\r\n          have built scalable backends in nodejs. When doing large projects, I\r\n          typically use <Highlight>Typescript</Highlight> because of its help in\r\n          preventing bugs through type safety.\r\n        </div>\r\n      </div>\r\n      <Spacer />\r\n      <div>\r\n        <h4>Projects</h4>\r\n        <ProjectCard imageUrl=\"/projects/BulletinSquare.png\" name=\"Bulletin\">\r\n          Bulletin is a product that I am creating for a startup company that I\r\n          started with a friend. I managed and designed the software for the\r\n          project.\r\n          <ReadMore href={\"/\"} />\r\n        </ProjectCard>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nconst Highlight: React.FC = props => {\r\n  return (\r\n    <span\r\n      style={{\r\n        color: \"var(--secondary)\"\r\n      }}\r\n    >\r\n      {props.children}\r\n    </span>\r\n  );\r\n};\r\n\r\nconst ProjectCard: React.FC<{\r\n  imageUrl: string;\r\n  name: string;\r\n  className?: string;\r\n}> = props => {\r\n  return (\r\n    <div className={\"projCard \" + (props.className || \"\")}>\r\n      <div\r\n        className=\"projectImage\"\r\n        style={{\r\n          backgroundImage: `url(${props.imageUrl})`\r\n        }}\r\n      />\r\n      <div className=\"projBody\">\r\n        <span className=\"title\">{props.name}</span>\r\n        <Spacer />\r\n        {props.children}\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nconst ReadMore: React.FC<{ href: string }> = props => {\r\n  return <a href={props.href}>Read More...</a>;\r\n};\r\n","import React from \"react\";\r\n\r\nimport \"./resume.css\";\r\n\r\nimport NavBar from \"../../components/navbar\";\r\n\r\nimport ResumeHeader from \"./resumeheader\";\r\nimport { JSHeader } from \"./sections\";\r\n\r\nconst Resume: React.FC = () => {\r\n  return (\r\n    <div className=\"resumeContainer\">\r\n      <NavBar />\r\n      <ResumeHeader />\r\n      <div className=\"resumeBody\">\r\n        <JSHeader></JSHeader>\r\n      </div>\r\n      <div className=\"viewPDF\">View PDF</div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Resume;\r\n","import React from \"react\";\r\nimport { BrowserRouter as Router, Switch, Route } from \"react-router-dom\";\r\nimport { CSSTransition, TransitionGroup } from \"react-transition-group\";\r\n\r\nimport Main from \"./pages/main\";\r\nimport Resume from \"./pages/resume/resume\";\r\n\r\nimport \"./App.css\";\r\n\r\nconst App: React.FC = () => {\r\n  return (\r\n    <div className=\"App\">\r\n      <Router>\r\n        <TransitionGroup className=\"transition-group\">\r\n          <CSSTransition timeout={{ exit: 300 }} classNames={\"fade\"}>\r\n            <Switch>\r\n              <Route path=\"/resume\">\r\n                <Resume />\r\n              </Route>\r\n              <Route path=\"/projects\"></Route>\r\n              <Route path=\"/\" exact>\r\n                <Main />\r\n              </Route>\r\n            </Switch>\r\n          </CSSTransition>\r\n        </TransitionGroup>\r\n      </Router>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport \"./index.css\";\r\nimport \"bootstrap/dist/css/bootstrap.min.css\";\r\n\r\nimport App from \"./App\";\r\nimport * as serviceWorker from \"./serviceWorker\";\r\n\r\nReactDOM.render(<App />, document.getElementById(\"root\"));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}