{"version":3,"sources":["Home.tsx","reportWebVitals.ts","index.tsx"],"names":["App","useState","iamText","setIamText","links","setLinks","className","cursor","element","hideWhenDone","hideWhenDoneDelay","avgTypingDelay","onTypingDone","Delay","ms","blink","Backspace","count","length","delay","cascade","href","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"qQA4EeA,MAtEf,WAAgB,IAAD,EACiBC,oBAAS,GAD1B,mBACNC,EADM,KACGC,EADH,OAEaF,oBAAS,GAFtB,mBAENG,EAFM,KAECC,EAFD,KAGb,OACE,qBAAKC,UAAU,MAAf,SACE,sBAAKA,UAAU,aAAf,UACE,eAAC,IAAD,CACEA,UAAU,OACVC,OAAQ,CACNC,QAAS,IACTC,cAAc,EACdC,kBAAmB,GAErBC,eAAgB,IAChBC,aAAc,kBAAMT,GAAW,IARjC,UAUE,8CACA,cAAC,IAAOU,MAAR,CAAcC,GAAI,SAEpB,sBAAKR,UAAU,YAAf,UACGJ,EACC,eAAC,IAAD,CACEI,UAAU,MACVC,OAAQ,CAAEQ,OAAO,EAAMP,QAAS,KAChCG,eAAgB,GAChBC,aAAc,kBAAMP,GAAS,IAJ/B,UAME,uDACA,cAAC,IAAOW,UAAR,CACEC,MAAO,sBAAsBC,OAC7BC,MAAO,MAET,sDACA,cAAC,IAAOH,UAAR,CACEC,MAAO,qBAAqBC,OAC5BC,MAAO,MAET,2DAGF,wBAEDf,EACC,eAAC,IAAD,CAAMgB,SAAO,EAACd,UAAU,QAAxB,UACE,uBAAMA,UAAU,mBAAhB,UACG,KAAM,IACP,oBAAGA,UAAU,YAAYe,KAAK,+BAA9B,mBACS,UAGX,uBAAMf,UAAU,mBAAhB,UACG,KAAM,IACP,oBACEA,UAAU,YACVe,KAAK,oCAFP,UAIG,IAJH,WAKW,aAKf,iCCtDGC,EAZS,SAACC,GACnBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCHdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.1a104695.chunk.js","sourcesContent":["import React, { useState } from \"react\";\nimport \"react-typist/dist/Typist.css\";\nimport \"./Home.scss\";\nimport Typist from \"react-typist\";\nimport { Fade } from \"react-awesome-reveal\";\n\nfunction App() {\n  const [iamText, setIamText] = useState(false);\n  const [links, setLinks] = useState(false);\n  return (\n    <div className=\"App\">\n      <div className=\"TypingArea\">\n        <Typist\n          className=\"Name\"\n          cursor={{\n            element: \"_\",\n            hideWhenDone: true,\n            hideWhenDoneDelay: 0,\n          }}\n          avgTypingDelay={100}\n          onTypingDone={() => setIamText(true)}\n        >\n          <span>Kol Crooks</span>\n          <Typist.Delay ms={500} />\n        </Typist>\n        <div className=\"subHeader\">\n          {iamText ? (\n            <Typist\n              className=\"iam\"\n              cursor={{ blink: true, element: \"_\" }}\n              avgTypingDelay={50}\n              onTypingDone={() => setLinks(true)}\n            >\n              <span>Front End Developer</span>\n              <Typist.Backspace\n                count={\"Front End Developer\".length}\n                delay={200}\n              />\n              <span>Back End Developer</span>\n              <Typist.Backspace\n                count={\"Back End Developer\".length}\n                delay={200}\n              />\n              <span>Full Stack Developer</span>\n            </Typist>\n          ) : (\n            <div />\n          )}\n          {links ? (\n            <Fade cascade className=\"links\">\n              <span className=\"carrot-indicator\">\n                {\"> \"}{\" \"}\n                <a className=\"link-text\" href=\"https://github.com/KolCrooks\">\n                  Github{\" \"}\n                </a>\n              </span>\n              <span className=\"carrot-indicator\">\n                {\"> \"}{\" \"}\n                <a\n                  className=\"link-text\"\n                  href=\"https://linkedin.com/in/kolcrooks\"\n                >\n                  {\" \"}\n                  LinkedIn{\" \"}\n                </a>\n              </span>\n            </Fade>\n          ) : (\n            <div />\n          )}\n        </div>\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport Home from \"./Home\";\nimport reportWebVitals from \"./reportWebVitals\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <Home />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}